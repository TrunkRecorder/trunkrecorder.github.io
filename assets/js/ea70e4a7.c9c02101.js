"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[547],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},h="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),h=c(n),d=a,m=h["".concat(s,".").concat(d)]||h[d]||p[d]||o;return n?r.createElement(m,l(l({ref:t},u),{},{components:n})):r.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[h]="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9575:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},l="Adjusting Squelch for Conventional Systems",i={unversionedId:"SQUELCH",id:"SQUELCH",title:"Adjusting Squelch for Conventional Systems",description:'Conventional Systems can use up a lot of CPU. Prior to v5.0, conventional recorders are always "on" waiting for a signal to break squelch. With v5.0 you now have a Signal Detector per source. Its job is to look over the bandwidth for that source and perform an FFT. For each FFT bin that is over a power threshold, it will look for a Conventional Recorder that has similar frequencies. If there is a match, it will Enable the recorder in the Souce\'s Recorder Selector. The Recorder Selector is just a way to determine if a Recorder should receive samples from the Source. In your logs, look for something like [ 0 ] AnalogC\tEnabled - Freq -63dBM (Threshold: -69dBM) if you see that, it means that the Signal Detector has turned on a conventional recorder.',source:"@site/docs/SQUELCH.md",sourceDirName:".",slug:"/SQUELCH",permalink:"/docs/SQUELCH",draft:!1,editUrl:"https://github.com/TrunkRecorder/trunkrecorder.github.io/tree/main/docs/SQUELCH.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FAQ",permalink:"/docs/FAQ"},next:{title:"CALL-HANDLING",permalink:"/docs/notes/CALL-HANDLING"}},s={},c=[{value:"Configuring a Conventional System",id:"configuring-a-conventional-system",level:2},{value:"Debugging a Conventional System",id:"debugging-a-conventional-system",level:2}],u={toc:c},h="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"adjusting-squelch-for-conventional-systems"},"Adjusting Squelch for Conventional Systems"),(0,a.kt)("mermaid",{value:'flowchart TD\n subgraph subgraph_5wys65oxs["Conventional Recorder"]\n        node_9tex2m50c["Squelch"]\n  end\n    A("SDR Source") --\x3e B("Signal Detector") & C("Recorder Selector")\n    B -. Turn On Recorder .- C\n    C --\x3e subgraph_5wys65oxs\n    B -.- nk["Automatic Signal Detection Threshold"]\n    style nk stroke-width:2px,stroke-dasharray: 2'}),(0,a.kt)("p",null,'Conventional Systems can use up a lot of CPU. Prior to v5.0, conventional recorders are always "on" waiting for a signal to break squelch. With v5.0 you now have a Signal Detector per source. Its job is to look over the bandwidth for that source and perform an FFT. For each FFT bin that is over a power threshold, it will look for a ',(0,a.kt)("strong",{parentName:"p"},"Conventional Recorder")," that has similar frequencies. If there is a match, it will Enable the recorder in the Souce's Recorder Selector. The Recorder Selector is just a way to determine if a Recorder should receive samples from the Source. In your logs, look for something like ",(0,a.kt)("inlineCode",{parentName:"p"},"[ 0 ] AnalogC\tEnabled - Freq: 855.737500 MHz\t Detected Signal: -63dBM (Threshold: -69dBM)")," if you see that, it means that the ",(0,a.kt)("strong",{parentName:"p"},"Signal Detector")," has turned on a conventional recorder. "),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"Signal Detector")," automatically tries to find a power threshold to separate signal from noise. It is not perfect. If you are seeing a recorder not turn on when there is a signal, that could be because the Signal Detector threshold is not being set correctly. Or, if the Recorder is always being enabled by the Signal Detector, even when there is not a transmission, that is also a sign that is not automatically being set correctly. You can manually set the Signal Detector Threshold in the ",(0,a.kt)("inlineCode",{parentName:"p"},"config.json")," file. Just to make things more confusing, the power levels used in the Signal Detector are slightly different than the values used for the Squelch. "),(0,a.kt)("p",null,"Each Conventional Recorder also has a Squelch setting. Once a Conventional Recorder has been enabled and is receiving samples from the source, it will use a Squelch block and only process samples above a certain power level. This prevent noise from being recorded. The Squelch value needs to be hand tuned, and can be set for the entire Conventional System, or per channel."),(0,a.kt)("h2",{id:"configuring-a-conventional-system"},"Configuring a Conventional System"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Use a visual signal analyzer program, like GQRX to explore the signal you are trying to capture"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Adjust the gain settings so that you have strong signals without adding a lot of noise. Copy these gain settings into the ",(0,a.kt)("inlineCode",{parentName:"p"},"config.json")," file.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Note the Db value for the noise floor. You should set the squelch value to be in between the noise floor value and the the signal peak values.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"config.json")," file you can specify the squelch value for the whole system, or do it channel by channel, or a mix:")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"System Wide Squelch")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"config.json"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  {\n    "systems": [\n    {\n        "type": "conventional",\n        "squelch": -50 \n    }\n  }\n'))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Channel Specific Squelch")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"config.json")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  {\n    "systems": [\n    {\n        "type": "conventional",\n        "channelFile": "channels.csv",\n    }\n  }\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"channels.csv"),"\n| TG Number | Frequency |  Squelch |\n| --------- | --------- | -------- |\n| 300       | 462275000 | -50 |"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"TG Number, Frequency, Squelch\n300, 462275000, -50\n"))))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"Hybrid Squelch")),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"config.json")),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'  {\n    "systems": [\n    {\n        "type": "conventional",\n        "channelFile": "channels.csv",\n        "squelch": -50\n    }\n  }\n'))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("inlineCode",{parentName:"p"},"channels.csv"),"\n| TG Number | Frequency |  Squelch |\n| --------- | --------- | -------- |\n| 300       | 462275000 | -70 |\n| 301       | 462300000 |  |"),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-csv"},"TG Number, Frequency, Squelch\n300, 462275000, -70\n301, 462300000, \n")))))))),(0,a.kt)("h2",{id:"debugging-a-conventional-system"},"Debugging a Conventional System"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h3",{parentName:"li",id:"the-channels-for-a-system-are-never-being-recorded"},"The Channels for a System are never being recorded"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Try setting the squelch value to something very low, like -100. This should cause the Recorder to always be on and recording. When you quit trunk-recorder you should have a long file, possibly of static. If you, it is possible that the Signal Detector is not working correctly. "))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("h3",{parentName:"li",id:"signal-detector-is-not-working-correctly"},"Signal Detector is not working correctly"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"IF you are not seeing a line like: ",(0,a.kt)("inlineCode",{parentName:"p"},"[ 0 ] AnalogC\tEnabled - Freq: 855.737500 MHz\t Detected Signal: -63dBM (Threshold: -69dBM)")," and you know there is a transmission on that frequency, it is a sign the the threshold for the Signal Detector is not being set correctly. To test this out, manually set the signal detector threshold in the ",(0,a.kt)("inlineCode",{parentName:"p"},"sources: [{}]")," section of the config.json file. "),(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-json"},'    "sources": [\n      {\n        "center": 851734375,\n        "rate": 2000000,\n        "driver": "osmosdr",\n        "signalDetectorThreshold": -100\n    }]\n')),(0,a.kt)("p",{parentName:"li"},"This will effectively leave all of the recorders enabled all the time... which is not the most efficient. If this does work, then try to find a value for the ",(0,a.kt)("inlineCode",{parentName:"p"},"signalDetectorThreshold")," that works reliably. RF power is measured differently between the Signal Detector and the Squelch block. You may need to use a value roughly 10 dB higher for the Signal Detector. Ideally, you only want the Signal Detector to enable a recorder when a there is a transmission that would trigger the squelch block in the Recorder."))))))}p.isMDXComponent=!0}}]);